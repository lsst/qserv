/*
 * LSST Data Management System
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
#ifndef LSST_QSERV_QMETA_USERTABLEINGESTREQUEST_H
#define LSST_QSERV_QMETA_USERTABLEINGESTREQUEST_H

// System headers
#include <cstdint>
#include <string>

// Third party headers
#include "nlohmann/json.hpp"

// This header declarations
namespace lsst::qserv::qmeta {

/**
 * Class UserTableRequest represents a request for ingesting user-generated data products
 * into Qserv. The requests are expected to contain CSV data, JSON schema and the relevant
 * parameters.
 */
class UserTableIngestRequest {
public:
    enum class TableType : int { FULLY_REPLICATED = 0, DIRECTOR = 1, CHILD = 2, REF_MATCH = 3 };

    static std::string tableType2str(TableType const tableType);
    static TableType str2tableType(std::string const& tableTypeStr);

    enum class Status : int { IN_PROGRESS = 0, COMPLETED = 1, FAILED = 2, FAILED_LR = 3 };

    static std::string status2str(Status const status);
    static Status str2status(std::string const& statusStr);

    enum class DataFormat : int { CSV = 0, JSON = 1, PARQUET = 2 };

    static std::string dataFormat2str(DataFormat const dataFormat);
    static DataFormat str2dataFormat(std::string const& dataFormatStr);

    UserTableIngestRequest() = default;
    UserTableIngestRequest(UserTableIngestRequest const&) = default;
    UserTableIngestRequest& operator=(UserTableIngestRequest const&) = default;
    ~UserTableIngestRequest() = default;

    /// Serialize the request into a JSON object.
    /// @return JSON object representing the request.
    nlohmann::json toJson() const;

    // The state of the request (generated by the system)

    std::uint32_t id = 0;                 ///< A unique identifier of the ingest request
    Status status = Status::IN_PROGRESS;  ///< The status of the request
    std::uint64_t beginTime = 0;          ///< The time the request was started
    std::uint64_t endTime = 0;            ///< The time the request was completed
    std::uint64_t deleteTime = 0;         ///< The time the table was deleted (Type::FULLY_REPLICATED only)
    std::string error;                    ///< The error message if the request failed

    // Parameters of the request provided by the user or derived from them.

    std::string database;                               ///< The name of a database
    std::string table;                                  ///< The name of a table
    TableType tableType = TableType::FULLY_REPLICATED;  ///< The type of the table to be ingested
    bool isTemporary = false;  ///< True if the table is temporary (Type::FULLY_REPLICATED only)
    DataFormat dataFormat = DataFormat::CSV;           ///< The format of the input data
    nlohmann::json schema = nlohmann::json::object();  ///< The JSON schema of the table
    nlohmann::json indexes = nlohmann::json::array();  ///< The JSON array of index definitions

    // Extended parameters of the request related to the format of the input data
    // and the table type.

    nlohmann::json extended = nlohmann::json::object();

    // Counters are computed internally by Qserv during request processing

    std::uint32_t numChunks = 0;  ///< The total number of chunks ingested (partitioned table types only)
    std::uint64_t numRows = 0;    ///< The total number of rows ingested
    std::uint64_t numBytes = 0;   ///< The number of bytes found in the input data file/stream

    // The request processing context (set internally by Qserv)

    std::uint32_t transactionId = 0;  ///< The transaction ID (Replication/Ingest system)
};

}  // namespace lsst::qserv::qmeta

#endif  // LSST_QSERV_QMETA_USERTABLEINGESTREQUEST_H