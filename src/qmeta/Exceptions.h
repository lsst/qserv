/*
 * LSST Data Management System
 * Copyright 2015 AURA/LSST.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <https://www.lsstcorp.org/LegalNotices/>.
 */
#ifndef LSST_QSERV_QMETA_EXCEPTIONS_H
#define LSST_QSERV_QMETA_EXCEPTIONS_H

// System headers

// Third-party headers
#include "boost/lexical_cast.hpp"

// Qserv headers
#include "qmeta/types.h"
#include "sql/SqlErrorObject.h"
#include "util/Issue.h"

namespace lsst::qserv::qmeta {

/// @addtogroup qmeta

/**
 *  @ingroup qmeta
 *
 *  @brief Base class for exceptions generated by qmeta module.
 */

class QMetaError : public util::Issue {
public:
    QMetaError(util::Issue::Context const& ctx, std::string const& message) : util::Issue(ctx, message) {}

    // this name will be used to find corresponding Python exception type
    virtual std::string typeName() const { return "CssError"; }
};

/// Exception thrown when czar name is not known.
class CzarNameError : public QMetaError {
public:
    CzarNameError(util::Issue::Context const& ctx, std::string const& name)
            : QMetaError(ctx, "Czar is not registered in metadata: " + name) {}

    virtual std::string typeName() const override { return "CzarNameError"; }
};

/// Exception thrown when czar ID is not known.
class CzarIdError : public QMetaError {
public:
    CzarIdError(util::Issue::Context const& ctx, CzarId id)
            : QMetaError(ctx,
                         "Czar ID is not registered in metadata: " + boost::lexical_cast<std::string>(id)) {}

    virtual std::string typeName() const override { return "CzarIdError"; }
};

/// Exception thrown when query ID is not known.
class QueryIdError : public QMetaError {
public:
    QueryIdError(util::Issue::Context const& ctx, QueryId id)
            : QMetaError(ctx,
                         "Query ID is not registered in metadata: " + boost::lexical_cast<std::string>(id)) {}

    virtual std::string typeName() const override { return "QueryIdError"; }
};

/// Exception thrown when chunk ID is not known.
class ChunkIdError : public QMetaError {
public:
    ChunkIdError(util::Issue::Context const& ctx, QueryId queryId, int chunkId)
            : QMetaError(ctx, "Chunk ID is not registered in metadata: " +
                                      boost::lexical_cast<std::string>(chunkId) +
                                      " query id:" + boost::lexical_cast<std::string>(queryId)) {}

    virtual std::string typeName() const override { return "ChunkIdError"; }
};

/// Exception thrown for SQL errors.
class SqlError : public QMetaError {
public:
    SqlError(util::Issue::Context const& ctx, sql::SqlErrorObject const& sqlErr)
            : QMetaError(ctx, "Error from mysql: (" + boost::lexical_cast<std::string>(sqlErr.errNo()) +
                                      ") " + sqlErr.errMsg()) {}

    virtual std::string typeName() const override { return "SqlError"; }
};

/// Exception thrown when one or more metadata tables are missing.
class MissingTableError : public QMetaError {
public:
    MissingTableError(util::Issue::Context const& ctx, std::string const& table)
            : QMetaError(ctx, "Query metadata table is missing: " + table) {}

    virtual std::string typeName() const override { return "MissingTableError"; }
};

/// Exception thrown when the specified metadata table is empty.
class EmptyTableError : public QMetaError {
public:
    EmptyTableError(util::Issue::Context const& ctx, std::string const& table)
            : QMetaError(ctx, "Query metadata table is empty: " + table) {}

    virtual std::string typeName() const override { return "EmptyTableError"; }
};

/// Exception thrown when database consistency is violated.
class ConsistencyError : public QMetaError {
public:
    ConsistencyError(util::Issue::Context const& ctx, std::string const& msg)
            : QMetaError(ctx, "Metadata consistency error: " + msg) {}

    virtual std::string typeName() const override { return "ConsistencyError"; }
};

/// Specialized run-time error: configuration is invalid.
class ConfigError : public QMetaError {
public:
    explicit ConfigError(util::Issue::Context const& ctx, std::string const& msg)
            : QMetaError(ctx, "Invalid config: " + msg) {}

    virtual std::string typeName() const override { return "ConfigError"; }
};

}  // namespace lsst::qserv::qmeta

#endif  // LSST_QSERV_QMETA_EXCEPTIONS_H
