/*
 * LSST Data Management System
 * Copyright 2011-2015 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
/// worker.proto
/// This defines the wire-messages sent between czar and worker.

// After enabling this option, please visit Qserv code to allow
// Arena where it's protected by macro QSERV_USE_PROTO_ARENA.
syntax = "proto2";
option cc_enable_arenas = true;

package lsst.qserv.proto;

// TODO:UJ delete when xrootd removed. ResonseSummary will need to be kept.
// Query message sent to worker
// One of these Task objects should be sent.
message TaskMsg {
    // Future: might have multiple db/chunk dependencies.
    optional string db = 2;
    optional int32 chunkid = 3;
    // repeated string scantables = 4;  // obsolete
    optional string user = 6;
    optional int32 scanpriority = 8;
    message Subchunk {
        optional string database = 1; // database (unused)
        repeated DbTbl dbtbl = 2; // subchunked tables
        repeated int32 id = 3; // subchunk ids
        message DbTbl {
            required string db = 1;
            required string tbl = 2;
       }
    }
    message Fragment {
        // A query fragment without "CREATE or INSERT".
        // Worker should synthesize.
        repeated string query = 1;
        optional string resulttable = 3;
        optional Subchunk subchunks = 4; // Only needed with subchunk-ed queries

        // Each fragment may only write results to one table,
        // but multiple fragments may write to the same table,
        // in which case the table contains a concatenation of the
        // contributing fragments' rows.
    }
    repeated Fragment fragment = 5;
    message ScanTable {
        required string db = 1;
        required string table = 2;
        required bool lockInMemory = 3;
        required int32 scanRating = 4;
    }
    repeated ScanTable scantable = 9;
    optional uint64 queryid = 10;
    optional int32 jobid = 11;
    optional bool scaninteractive = 12;
    optional int32 attemptcount = 13;
    optional uint32 czarid = 14;
    optional int32 maxtablesize_mb = 15 [default = 0];
}

// The file-based result delivery protocol has two kinds of messages.
//
// 1. The summary message sent back to Czar over the XROOTD/SSI protocol:
//
//   - The length in bytes of the serialized ResponseSummary object (32-bits)
//   - The serialized ResponseSummary object
//
// 2. The response data messages serialized and written into the result file
//
//   - The length in bytes of the first serialized ResponseData object (32-bits)
//   - The serialized first ResponseData object
//   [ ... ]
//   - The length in bytes of the last serialized ResponseData object (32-bits)
//   - The serialized last ResponseData object

message ResponseSummary {
    required string wname = 1;
    optional int32 errorcode = 2 [default = 0];
    optional string errormsg = 3 [default = ""];
    required uint64 queryid = 4;
    required int32 jobid = 5;
    optional uint32 rowcount = 6 [default = 0];
    optional uint64 transmitsize = 7 [default = 0];
    optional int32 attemptcount = 8 [default = 0];
    optional string fileresource_xroot = 9 [default = ""];
    optional string fileresource_http = 10 [default = ""];
}

message RowBundle {
    repeated bytes column = 1;  // bytes to allow BLOB encoding
    repeated bool isnull = 2;   // Flag to allow sending nulls.
}

message ResponseData {
    repeated RowBundle row = 1;
    required uint32 rowcount = 2;
    required uint64 transmitsize = 3;
}

/////////////////////////////////////////////////////////////////
// Protocol definition for the query management requests. These
// requests do not require any response messages to be explicitly
// sent by workers.
//
// ATTENTION: each message sent to a worker must be preceeded by
// an int32 size (network-byte-ordered) word carrying a size
// of the message.
////////////////////////////////////////////////////////////////

// The completion status to be sent back with responses to the query management requests.
message WorkerCommandStatus {
    enum Code {
        SUCCESS = 1;    // The successful completion of a request.
        ERROR   = 2;    // An error occurred during request execution.
    }
    optional Code code = 3 [default = SUCCESS];
    optional string error = 2 [default = ""];   // Optional error message (depends on the code)
}

message QueryManagement {
    enum Operation {
        CANCEL_AFTER_RESTART = 1;   // Cancel older queries before the specified query (excluding that one).
        CANCEL = 2;                 // Cancel a specific query.
        COMPLETE = 3;               // Notify workers on the completion of the specified query.
    }
    required Operation op = 1;
    required uint64 czar_id = 3;
    required uint64 query_id = 2;
}
