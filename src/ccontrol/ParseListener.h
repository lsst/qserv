// -*- LSST-C++ -*-
/*
 * LSST Data Management System
 * Copyright 2018 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
#ifndef LSST_QSERV_CCONTROL_PARSELISTENER_H
#define LSST_QSERV_CCONTROL_PARSELISTENER_H

#include <memory>
#include <stack>

#include "parser/QSMySqlParser.h"  // included for contexts. They *could* be forward declared.
#include "parser/QSMySqlParserBaseListener.h"

namespace antlr4 {
class CommonTokenStream;
class ParserRuleContext;
}  // namespace antlr4

namespace lsst::qserv::ccontrol {
class Adapter;
class RootAdapter;
class UserQuery;
class UserQueryResources;
}  // namespace lsst::qserv::ccontrol

namespace lsst::qserv::query {
class SelectStmt;
}

// QSMySqlLexer is an antlr4-generated file; not in a namespace.
class QSMySqlLexer;

namespace lsst::qserv::ccontrol {

class ParseListener : public QSMySqlParserListener {
public:
    ParseListener(std::string const& statement,
                  std::shared_ptr<ccontrol::UserQueryResources> const& queryResources);
    virtual ~ParseListener() = default;

    // accessors for query types that may have been generated by this listener
    std::shared_ptr<query::SelectStmt> getSelectStatement() const;

    std::shared_ptr<ccontrol::UserQuery> getUserQuery() const;

    // For error messages:
    //
    // returns a comma delimited list of the names of adapters currently in the adapter stack.
    std::string adapterStackToString() const;
    // returns a hierarchical view of the query as parsed by antlr4
    std::string getStringTree() const;
    // returns a key-value list indicating how the query was tokenized
    std::string getTokens() const;
    // returns the original query string
    std::string getStatementString() const;

    // Get the UserQueryResources, used by some UserQuery subclass constructors.
    std::shared_ptr<ccontrol::UserQueryResources> getQueryResources() const { return _queryResources; }

    typedef std::vector<std::pair<std::string, std::string>> VecPairStr;

    // For the current query, this returns a list where each pair contains a bit of the string from the query
    // and how antlr4 tokenized that bit of string. It is useful for debugging problems where antlr4 did not
    // parse a query as expected, in the case where the string was not tokenized as expected.
    static VecPairStr getTokenPairs(antlr4::CommonTokenStream& tokens, QSMySqlLexer const& lexer);

protected:
    virtual void enterRoot(QSMySqlParser::RootContext* /*ctx*/) override;
    virtual void exitRoot(QSMySqlParser::RootContext* /*ctx*/) override;

    virtual void enterSqlStatements(QSMySqlParser::SqlStatementsContext* /*ctx*/) override;
    virtual void exitSqlStatements(QSMySqlParser::SqlStatementsContext* /*ctx*/) override;

    virtual void enterSqlStatement(QSMySqlParser::SqlStatementContext* /*ctx*/) override;
    virtual void exitSqlStatement(QSMySqlParser::SqlStatementContext* /*ctx*/) override;

    virtual void enterEmptyStatement(QSMySqlParser::EmptyStatementContext* /*ctx*/) override;
    virtual void exitEmptyStatement(QSMySqlParser::EmptyStatementContext* /*ctx*/) override;

    virtual void enterDmlStatement(QSMySqlParser::DmlStatementContext* /*ctx*/) override;
    virtual void exitDmlStatement(QSMySqlParser::DmlStatementContext* /*ctx*/) override;

    virtual void enterAdministrationStatement(
            QSMySqlParser::AdministrationStatementContext* /*ctx*/) override;
    virtual void exitAdministrationStatement(QSMySqlParser::AdministrationStatementContext* /*ctx*/) override;

    virtual void enterCallStatement(QSMySqlParser::CallStatementContext* /*ctx*/) override;
    virtual void exitCallStatement(QSMySqlParser::CallStatementContext* /*ctx*/) override;

    virtual void enterSimpleSelect(QSMySqlParser::SimpleSelectContext* /*ctx*/) override;
    virtual void exitSimpleSelect(QSMySqlParser::SimpleSelectContext* /*ctx*/) override;

    virtual void enterOrderByClause(QSMySqlParser::OrderByClauseContext* /*ctx*/) override;
    virtual void exitOrderByClause(QSMySqlParser::OrderByClauseContext* /*ctx*/) override;

    virtual void enterOrderByExpression(QSMySqlParser::OrderByExpressionContext* /*ctx*/) override;
    virtual void exitOrderByExpression(QSMySqlParser::OrderByExpressionContext* /*ctx*/) override;

    virtual void enterTableSources(QSMySqlParser::TableSourcesContext* /*ctx*/) override;
    virtual void exitTableSources(QSMySqlParser::TableSourcesContext* /*ctx*/) override;

    virtual void enterTableSourceBase(QSMySqlParser::TableSourceBaseContext* /*ctx*/) override;
    virtual void exitTableSourceBase(QSMySqlParser::TableSourceBaseContext* /*ctx*/) override;

    virtual void enterAtomTableItem(QSMySqlParser::AtomTableItemContext* /*ctx*/) override;
    virtual void exitAtomTableItem(QSMySqlParser::AtomTableItemContext* /*ctx*/) override;

    virtual void enterInnerJoin(QSMySqlParser::InnerJoinContext* /*ctx*/) override;
    virtual void exitInnerJoin(QSMySqlParser::InnerJoinContext* /*ctx*/) override;

    virtual void enterNaturalJoin(QSMySqlParser::NaturalJoinContext* /*ctx*/) override;
    virtual void exitNaturalJoin(QSMySqlParser::NaturalJoinContext* /*ctx*/) override;

    virtual void enterQuerySpecification(QSMySqlParser::QuerySpecificationContext* /*ctx*/) override;
    virtual void exitQuerySpecification(QSMySqlParser::QuerySpecificationContext* /*ctx*/) override;

    virtual void enterSelectSpec(QSMySqlParser::SelectSpecContext* /*ctx*/) override;
    virtual void exitSelectSpec(QSMySqlParser::SelectSpecContext* /*ctx*/) override;

    virtual void enterSelectElements(QSMySqlParser::SelectElementsContext* /*ctx*/) override;
    virtual void exitSelectElements(QSMySqlParser::SelectElementsContext* /*ctx*/) override;

    virtual void enterSelectStarElement(QSMySqlParser::SelectStarElementContext* /*ctx*/) override;
    virtual void exitSelectStarElement(QSMySqlParser::SelectStarElementContext* /*ctx*/) override;

    virtual void enterSelectColumnElement(QSMySqlParser::SelectColumnElementContext* /*ctx*/) override;
    virtual void exitSelectColumnElement(QSMySqlParser::SelectColumnElementContext* /*ctx*/) override;

    virtual void enterSelectFunctionElement(QSMySqlParser::SelectFunctionElementContext* /*ctx*/) override;
    virtual void exitSelectFunctionElement(QSMySqlParser::SelectFunctionElementContext* /*ctx*/) override;

    virtual void enterSelectExpressionElement(
            QSMySqlParser::SelectExpressionElementContext* /*ctx*/) override;
    virtual void exitSelectExpressionElement(QSMySqlParser::SelectExpressionElementContext* /*ctx*/) override;

    virtual void enterFromClause(QSMySqlParser::FromClauseContext* /*ctx*/) override;
    virtual void exitFromClause(QSMySqlParser::FromClauseContext* /*ctx*/) override;

    virtual void enterGroupByItem(QSMySqlParser::GroupByItemContext* /*ctx*/) override;
    virtual void exitGroupByItem(QSMySqlParser::GroupByItemContext* /*ctx*/) override;

    virtual void enterLimitClause(QSMySqlParser::LimitClauseContext* /*ctx*/) override;
    virtual void exitLimitClause(QSMySqlParser::LimitClauseContext* /*ctx*/) override;

    virtual void enterSetVariable(QSMySqlParser::SetVariableContext* /*ctx*/) override;
    virtual void exitSetVariable(QSMySqlParser::SetVariableContext* /*ctx*/) override;

    virtual void enterVariableClause(QSMySqlParser::VariableClauseContext* /*ctx*/) override;
    virtual void exitVariableClause(QSMySqlParser::VariableClauseContext* /*ctx*/) override;

    virtual void enterFullId(QSMySqlParser::FullIdContext* /*ctx*/) override;
    virtual void exitFullId(QSMySqlParser::FullIdContext* /*ctx*/) override;

    virtual void enterTableName(QSMySqlParser::TableNameContext* /*ctx*/) override;
    virtual void exitTableName(QSMySqlParser::TableNameContext* /*ctx*/) override;

    virtual void enterFullColumnName(QSMySqlParser::FullColumnNameContext* /*ctx*/) override;
    virtual void exitFullColumnName(QSMySqlParser::FullColumnNameContext* /*ctx*/) override;

    virtual void enterUid(QSMySqlParser::UidContext* /*ctx*/) override;
    virtual void exitUid(QSMySqlParser::UidContext* /*ctx*/) override;

    virtual void enterSimpleId(QSMySqlParser::SimpleIdContext* /*ctx*/) override;
    virtual void exitSimpleId(QSMySqlParser::SimpleIdContext* /*ctx*/) override;

    virtual void enterDottedId(QSMySqlParser::DottedIdContext* /*ctx*/) override;
    virtual void exitDottedId(QSMySqlParser::DottedIdContext* /*ctx*/) override;

    virtual void enterDecimalLiteral(QSMySqlParser::DecimalLiteralContext* /*ctx*/) override;
    virtual void exitDecimalLiteral(QSMySqlParser::DecimalLiteralContext* /*ctx*/) override;

    virtual void enterStringLiteral(QSMySqlParser::StringLiteralContext* /*ctx*/) override;
    virtual void exitStringLiteral(QSMySqlParser::StringLiteralContext* /*ctx*/) override;

    virtual void enterNullNotnull(QSMySqlParser::NullNotnullContext* /*ctx*/) override;
    virtual void exitNullNotnull(QSMySqlParser::NullNotnullContext* /*ctx*/) override;

    virtual void enterConstant(QSMySqlParser::ConstantContext* /*ctx*/) override;
    virtual void exitConstant(QSMySqlParser::ConstantContext* /*ctx*/) override;

    virtual void enterUidList(QSMySqlParser::UidListContext* /*ctx*/) override;
    virtual void exitUidList(QSMySqlParser::UidListContext* /*ctx*/) override;

    virtual void enterExpressions(QSMySqlParser::ExpressionsContext* /*ctx*/) override;
    virtual void exitExpressions(QSMySqlParser::ExpressionsContext* /*ctx*/) override;

    virtual void enterConstants(QSMySqlParser::ConstantsContext* /*ctx*/) override;
    virtual void exitConstants(QSMySqlParser::ConstantsContext* /*ctx*/) override;

    virtual void enterAggregateFunctionCall(QSMySqlParser::AggregateFunctionCallContext* /*ctx*/) override;
    virtual void exitAggregateFunctionCall(QSMySqlParser::AggregateFunctionCallContext* /*ctx*/) override;

    virtual void enterScalarFunctionCall(QSMySqlParser::ScalarFunctionCallContext* /*ctx*/) override;
    virtual void exitScalarFunctionCall(QSMySqlParser::ScalarFunctionCallContext* /*ctx*/) override;

    virtual void enterUdfFunctionCall(QSMySqlParser::UdfFunctionCallContext* /*ctx*/) override;
    virtual void exitUdfFunctionCall(QSMySqlParser::UdfFunctionCallContext* /*ctx*/) override;

    virtual void enterAggregateWindowedFunction(
            QSMySqlParser::AggregateWindowedFunctionContext* /*ctx*/) override;
    virtual void exitAggregateWindowedFunction(
            QSMySqlParser::AggregateWindowedFunctionContext* /*ctx*/) override;

    virtual void enterScalarFunctionName(QSMySqlParser::ScalarFunctionNameContext* /*ctx*/) override;
    virtual void exitScalarFunctionName(QSMySqlParser::ScalarFunctionNameContext* /*ctx*/) override;

    virtual void enterFunctionArgs(QSMySqlParser::FunctionArgsContext* /*ctx*/) override;
    virtual void exitFunctionArgs(QSMySqlParser::FunctionArgsContext* /*ctx*/) override;

    virtual void enterFunctionArg(QSMySqlParser::FunctionArgContext* /*ctx*/) override;
    virtual void exitFunctionArg(QSMySqlParser::FunctionArgContext* /*ctx*/) override;

    virtual void enterNotExpression(QSMySqlParser::NotExpressionContext* /*ctx*/) override;
    virtual void exitNotExpression(QSMySqlParser::NotExpressionContext* /*ctx*/) override;

    virtual void enterQservFunctionSpecExpression(
            QSMySqlParser::QservFunctionSpecExpressionContext* ctx) override;
    virtual void exitQservFunctionSpecExpression(
            QSMySqlParser::QservFunctionSpecExpressionContext* ctx) override;

    virtual void enterLogicalExpression(QSMySqlParser::LogicalExpressionContext* /*ctx*/) override;
    virtual void exitLogicalExpression(QSMySqlParser::LogicalExpressionContext* /*ctx*/) override;

    virtual void enterPredicateExpression(QSMySqlParser::PredicateExpressionContext* /*ctx*/) override;
    virtual void exitPredicateExpression(QSMySqlParser::PredicateExpressionContext* /*ctx*/) override;

    virtual void enterQservFunctionSpec(QSMySqlParser::QservFunctionSpecContext* /*ctx*/) override;
    virtual void exitQservFunctionSpec(QSMySqlParser::QservFunctionSpecContext* /*ctx*/) override;

    virtual void enterExpressionAtomPredicate(
            QSMySqlParser::ExpressionAtomPredicateContext* /*ctx*/) override;
    virtual void exitExpressionAtomPredicate(QSMySqlParser::ExpressionAtomPredicateContext* /*ctx*/) override;

    virtual void enterInPredicate(QSMySqlParser::InPredicateContext* /*ctx*/) override;
    virtual void exitInPredicate(QSMySqlParser::InPredicateContext* /*ctx*/) override;

    virtual void enterBetweenPredicate(QSMySqlParser::BetweenPredicateContext* /*ctx*/) override;
    virtual void exitBetweenPredicate(QSMySqlParser::BetweenPredicateContext* /*ctx*/) override;

    virtual void enterBinaryComparasionPredicate(
            QSMySqlParser::BinaryComparasionPredicateContext* /*ctx*/) override;
    virtual void exitBinaryComparasionPredicate(
            QSMySqlParser::BinaryComparasionPredicateContext* /*ctx*/) override;

    virtual void enterIsNullPredicate(QSMySqlParser::IsNullPredicateContext* /*ctx*/) override;
    virtual void exitIsNullPredicate(QSMySqlParser::IsNullPredicateContext* /*ctx*/) override;

    virtual void enterLikePredicate(QSMySqlParser::LikePredicateContext* /*ctx*/) override;
    virtual void exitLikePredicate(QSMySqlParser::LikePredicateContext* /*ctx*/) override;

    virtual void enterNestedExpressionAtom(QSMySqlParser::NestedExpressionAtomContext* /*ctx*/) override;
    virtual void exitNestedExpressionAtom(QSMySqlParser::NestedExpressionAtomContext* /*ctx*/) override;

    virtual void enterMathExpressionAtom(QSMySqlParser::MathExpressionAtomContext* /*ctx*/) override;
    virtual void exitMathExpressionAtom(QSMySqlParser::MathExpressionAtomContext* /*ctx*/) override;

    virtual void enterConstantExpressionAtom(QSMySqlParser::ConstantExpressionAtomContext* /*ctx*/) override;
    virtual void exitConstantExpressionAtom(QSMySqlParser::ConstantExpressionAtomContext* /*ctx*/) override;

    virtual void enterFunctionCallExpressionAtom(
            QSMySqlParser::FunctionCallExpressionAtomContext* /*ctx*/) override;
    virtual void exitFunctionCallExpressionAtom(
            QSMySqlParser::FunctionCallExpressionAtomContext* /*ctx*/) override;

    virtual void enterFullColumnNameExpressionAtom(
            QSMySqlParser::FullColumnNameExpressionAtomContext* /*ctx*/) override;
    virtual void exitFullColumnNameExpressionAtom(
            QSMySqlParser::FullColumnNameExpressionAtomContext* /*ctx*/) override;

    virtual void enterBitExpressionAtom(QSMySqlParser::BitExpressionAtomContext* /*ctx*/) override;
    virtual void exitBitExpressionAtom(QSMySqlParser::BitExpressionAtomContext* /*ctx*/) override;

    virtual void enterComparisonOperator(QSMySqlParser::ComparisonOperatorContext* /*ctx*/) override;
    virtual void exitComparisonOperator(QSMySqlParser::ComparisonOperatorContext* /*ctx*/) override;

    virtual void enterLogicalOperator(QSMySqlParser::LogicalOperatorContext* /*ctx*/) override;
    virtual void exitLogicalOperator(QSMySqlParser::LogicalOperatorContext* /*ctx*/) override;

    virtual void enterBitOperator(QSMySqlParser::BitOperatorContext* /*ctx*/) override;
    virtual void exitBitOperator(QSMySqlParser::BitOperatorContext* /*ctx*/) override;

    virtual void enterMathOperator(QSMySqlParser::MathOperatorContext* /*ctx*/) override;
    virtual void exitMathOperator(QSMySqlParser::MathOperatorContext* /*ctx*/) override;

    virtual void enterKeywordsCanBeId(QSMySqlParser::KeywordsCanBeIdContext* /*ctx*/) override;
    virtual void exitKeywordsCanBeId(QSMySqlParser::KeywordsCanBeIdContext* /*ctx*/) override;

    virtual void enterFunctionNameBase(QSMySqlParser::FunctionNameBaseContext* /*ctx*/) override;
    virtual void exitFunctionNameBase(QSMySqlParser::FunctionNameBaseContext* /*ctx*/) override;

    virtual void enterEveryRule(antlr4::ParserRuleContext* /*ctx*/) override {}
    virtual void exitEveryRule(antlr4::ParserRuleContext* /*ctx*/) override {}
    virtual void visitTerminal(antlr4::tree::TerminalNode* /*node*/) override {}
    virtual void visitErrorNode(antlr4::tree::ErrorNode* /*node*/) override {}

private:
    // Adapter is a base class for a stack of adapter objects. Adapters implement appropriate API for
    // the kinds of children that may be assigned to them. The stack represents execution state while the
    // antlr4 walker traverses it's internal AST. The root object (separate from the stack) will end up owning
    // the parsed query.
    std::deque<std::shared_ptr<Adapter>> _adapterStack;
    std::shared_ptr<RootAdapter> _rootAdapter;

    template <typename ParentAdapter, typename ChildAdapter, typename Context>
    std::shared_ptr<ChildAdapter> pushAdapterStack(Context* ctx);

    template <typename ChildAdapter>
    void popAdapterStack(antlr4::ParserRuleContext* ctx);

    template <typename ChildAdapter>
    std::shared_ptr<ChildAdapter> adapterStackTop() const;

    std::string _statement;
    std::shared_ptr<ccontrol::UserQueryResources> _queryResources;
};

}  // namespace lsst::qserv::ccontrol

#endif  // LSST_QSERV_CCONTROL_PARSELISTENER_H
