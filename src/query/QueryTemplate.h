// -*- LSST-C++ -*-
/*
 * LSST Data Management System
 * Copyright 2012-2017 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
/**
 * @file
 *
 * @author Daniel L. Wang, SLAC
 */

#ifndef LSST_QSERV_QUERY_QUERYTEMPLATE_H
#define LSST_QSERV_QUERY_QUERYTEMPLATE_H

// System headers
#include <memory>
#include <string>
#include <vector>

// Forward declarations
namespace lsst::qserv::query {
class ColumnRef;
class TableRefAux;
}  // namespace lsst::qserv::query

namespace lsst::qserv::query {

/// QueryTemplate
///
/// @brief QueryTemplate stores a query representation that is a sequence of
/// mostly-concrete tokens. It contains minimal structural information except
/// what is necessary to vary queries for different partitions.
///
/// A query template is an intermediate stage between a fully-structured
/// semantic-preserving query representation (i.e., SelectStmt) and generated
/// query (a plain std::string). The purpose of the intermediate stage is to
/// provide a representation that can be manipulated quickly to generate batches
/// of queries that only differ in certain, fixed locations.

/// Query templates are constructed by appending tokens to a stream. Concrete
/// queries are generated by applying a mapping to the template and performing
/// substitutions at certain locations.

/// History:
/// QueryTemplate replaces the string-based Substitution class that was used to
/// perform fast chunk substitutions in generating queries.
///
/// The Substition/SqlSubstitution model employed a single template
/// string along with an index to the string regions that were
/// substitutable. Callers provided a mapping (i.e., {Object ->
/// Object_2031, Object_s2 -> Object_2031_232} ) that was used to
/// perform the subsitution. The representation was fairly compact, but relied
/// on string manipulation with structural information limited to indexes and
/// extents.
///
class QueryTemplate {
public:
    using Vect = std::vector<QueryTemplate>;

    /// An abstract entry in a query template
    class Entry {
    public:
        using Ptr = std::shared_ptr<Entry>;
        virtual ~Entry() {}
        virtual std::string getValue() const = 0;
        /// isDynamic signals whether the entry is concrete or substitutable.
        virtual bool isDynamic() const { return false; }
    };

    typedef std::vector<Entry::Ptr> EntryPtrVector;

    class StringEntry : public Entry {
    public:
        StringEntry(std::string const& s_) : s(s_) {}
        virtual std::string getValue() const { return s; }
        std::string s;
    };
    /// An abstract mapping from entry to entry
    class EntryMapping {
    public:
        virtual ~EntryMapping() {}
        virtual Entry::Ptr mapEntry(Entry const& e) const = 0;
    };

    enum SetAliasMode {
        NO_ALIAS,            // e.g. "db.table.val"
        USE_ALIAS,           // e.g. "myValue" (or "`alias`.val" if no value alias, or "db.table.col" if
                             // no value or table alias).
        DEFINE_TABLE_ALIAS,  // e.g. "db.table AS myTable" - it is illegal to render ValueExpr in this mode
        DEFINE_VALUE_ALIAS_USE_TABLE_ALIAS,  // e.g. "`alias`.val AS myValue"
        NO_VALUE_ALIAS_USE_TABLE_ALIAS,      // e.g. "`myTable`.val"
    };

    enum GetAliasMode {
        DEFINE,   // DEFINE should print out the table or column name followed by AS and the alias name.
        USE,      // USE should only print out the alias.
        DONT_USE  // DONT USE should only print out the table or column name.
    };

    QueryTemplate() {}

    QueryTemplate(SetAliasMode aliasMode) : _aliasMode(aliasMode) {}

    /**
     * @brief Get a version of the identifier that has any needed quoting applied.
     *
     * Curently this means putting backtick quotes around the identifier if quoteIdentifiers is set to true,
     * but may include other formatting as needed in the future.
     *
     * @param identifier a reference to a string to be formatted.
     * @return std::string& a reference to the passed-in string so the function may be used inline.
     */
    std::string formatIdentifier(std::string const& identifier) const;

    // set if the output should quote identifiers or not
    void setQuoteIdentifiers(bool quoteIdentifiers) { _quoteIdentifiers = quoteIdentifiers; };

    // get if the output should quote identifiers or not
    bool quoteIdentifiers() const { return _quoteIdentifiers; }

    void append(std::string const& s);
    void append(ColumnRef const& cr);
    void append(Entry::Ptr const& e);

    // process an identifier string entry with formatIdentifier and append it.
    void appendIdentifier(std::string const& s);

    /** Return a string representation of the object
     *
     * Used to generate Qserv internal queries (i.e. chunk queries, parallel queries, ...)
     *
     * @return a string representation of the object.
     *
     */
    std::string sqlFragment() const;

    /** Output operator for QueryTemplate
     *
     *  Can be used for logging, of debugging
     *
     *  @param os: std::ostream which will contain object output.
     *  @param queryTemplate: QueryTemplate to output.
     *  @return std::ostream containing output.
     */
    friend std::ostream& operator<<(std::ostream& os, QueryTemplate const& queryTemplate);

    /**
     * @brief Set a flag indicating if aliases should be defined or used.
     */
    void setAliasMode(SetAliasMode aliasMode);

    /**
     * @brief Get the alias mode.
     *
     * Useful to get the alias mode, if it needs to be set in another QueryTemplate instsance.
     */
    SetAliasMode getAliasMode() const;

    /**
     * @brief Get the AliasMode for ValueExprs.
     *
     * There is an assumption that this will only get called when trying to print a ValueExpr. There is a
     * case where it does not make sense to be printing a ValueExpr; when the mode is DEFINE_TABLE_ALIAS,
     * which is used when printing the FROM list. (e.g. "db.table AS myTable" never goes with any kind of
     * value expressed in a ValueExpr).
     *
     * @throws runtime_error if called while the aliasMode (set via setAliasMode) is DEFINE_TABLE_ALIAS.
     */
    GetAliasMode getValueExprAliasMode() const;

    /**
     * @brief Get the AliasMode for TableRefs
     */
    GetAliasMode getTableAliasMode() const;

    /**
     * @brief Set/get if ColumnRef should print the TableRef, or only the column name.
     *
     * @param columnOnly If true, ColumnRef will not print the TableRef.
     */
    void setUseColumnOnly(bool columnOnly) { _useColumnOnly = columnOnly; }
    bool getUseColumnOnly() const { return _useColumnOnly; }

    std::string generate(EntryMapping const& em) const;
    void clear();

    template <class T>
    static std::ostream& renderDbg(std::ostream& os, T const& t) {
        QueryTemplate qt;
        t.renderTo(qt);
        return os << qt.sqlFragment();
    }

    std::string dump() const;

private:
    EntryPtrVector _entries;
    SetAliasMode _aliasMode{USE_ALIAS};
    bool _quoteIdentifiers{true};  // if true, identifiers will be quoted.
    bool _useColumnOnly{false};    // if true, ColumnRef won't print db or table, only column name.
};

}  // namespace lsst::qserv::query

#endif  // LSST_QSERV_QUERY_QUERYTEMPLATE_H
