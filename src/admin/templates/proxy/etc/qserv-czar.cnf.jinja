[frontend]

xrootd={{ xrootd_manager }}:1094

#[mgmtdb]
#db=qservMeta
# Steal resultdb settings for now.

[css]
technology = mysql
hostname = {{ czar_db_host }}
port = {{ czar_db_port }}
username = qsmaster
password = CHANGEME2
database = qservCssData
socket = {{ czar_db_socket }}

[resultdb]
db = qservResult
unix_socket = {{ czar_db_socket }}
host = {{ czar_db_host }}
user = qsmaster
passwd = CHANGEME2
port = {{ czar_db_port }}

# Any table in resultdb that hasn't been updated in this many days is deleted.
oldestResultKeptDays = 7

# maximum number of connection retries to SQL databse (per connection attempt)
maxsqlconnectionattempts = 10

# maximum user query result size in MB
maxtablesize_mb = 5100


# database connection for QMeta database
[qmeta]
db = qservMeta
unix_socket = {{ czar_db_socket }}
host = {{ czar_db_host }}
user = qsmaster
passwd = CHANGEME2
port = {{ czar_db_port }}
maxMsgSourceStore = 5

# database connection for QStatusData
# Using qmeta for now. May move this qservResult or make its own instance
# databse based on what happens with multiple czars.
[qstatus]
#db = qservStatusData
db = qservMeta
user = qsmaster
passwd = CHANGEME2
host = {{ czar_db_host }}
port = {{ czar_db_port }}

[tuning]
#memoryEngine = yes
#largeResultConcurrentMerges = 3
largeResultConcurrentMerges = 6
# xrootdCBThreadsInit must be less than xrootdCBThreadsMax
xrootdCBThreadsMax = 500
xrootdCBThreadsInit = 50

# INSTRUCTIONS:
#
#   Allowed range: 1 - 1024. Any number above 1024 will be truncated to 1024.
#   The deafault value of the parameter in xrootd is 4. Set it higher in
#   Qserv deployments with the large number of chunks per catalog, or/and
#   for use cases where many queries are processed by Qserv simultaneously,
#   even for a modest number of chunks per catalog.
#
#   Set the parameter to 0 to enable auto-tuning.
#
#   The general formula for auto-tuning implies incrementing a value of the parameter
#   by 1 for every 65,000 "in-flight" requests.
#
#   The value set below has been tested to work for 80 simultaneous "shared scan" queries
#   of 150,000 chunks each.
xrootdSpread = 0

# Seconds between updates the czar sends to qmeta for completed chunks.
# This is per user query and important milestones ignore this limit.
qMetaSecsBetweenChunkCompletionUpdates = 59


# If not 0 then broadcast query completion/cancellation events to all workers
# so that they would do proper garbage collection and resource recycling.
notifyWorkersOnQueryFinish = 1

# If not 0 then broadcast this event to all workers to let them cancel any older
# that were submitted before the restart. The first query identifier in the new
# series will be reported to the workers. The identifier will be used as
# a high watermark for diffirentiating between the older (to be cancelled)
# and the newer queries.
notifyWorkersOnCzarRestart = 1

#[debug]
#chunkLimit = -1

# Please see util/QdispPool.h QdispPool::QdispPool for more information
[qdisppool]
#size of the pool
poolSize = 1000
# Low numbers are higher priority. Largest priority 3 creates 4 priority queues 0, 1, 2, 3
#     Must be greater than 0.
largestPriority = 3
# Maximum number of threads running for each queue. No spaces. Values separated by ':'
#   Using largestPriority = 2  and   vectRunsizes = 3:5:8
#    queue 0 would have runSize 3, queue 1 would have runSize 5, and queue 2 would have runSize 8.
vectRunSizes = 800:800:500:500
# Minimum number of threads running for each queue. No spaces. Values separated by ':'
vectMinRunningSizes = 0:3:3:3
# Maximum number of QueryRequests allowed to be running at one time. &&& unused??
qReqPseudoFifoMaxRunning = 299

[replication]

# This section contains parameters related to the Czar management service
# that is used by the Replication System to manage Qserv Czaar or to acquire
# monitoring stats from Czar. The Czar is required to self-register
# themselves with the Replication System's Registry that can be contacted
# at a location specified via connection parameters 'registry_host' and
# 'registry_port'. Configuration parameters 'instance_id', 'auth_key'
# and 'admin_auth_key' represent the security context of the Czar control
# protocol. This context is required to be provided by the Czar when registering
# itself with the Registry. The context is also used by the management
# service when processing management requests sent to the service by
# the Replication Controller or relevant applications.
#
# The Czar is required to periodically update its registration status at
# the interval specified at 'registry_heartbeat_ival_sec'. The Czar status
# includes (at least):
#   - the unique identifier of the Czar
#   - the FQDN of a host (or a pod) where the Czar is run
#   - the HTTP port of the Czar management service (parameter 'http_port')

# The unique instance of the Replication System's domain.
instance_id = {{ repl_instance_id }}

# The authorization key is required by the Czar control protocol.
auth_key = {{ repl_auth_key }}
admin_auth_key = {{ repl_admin_auth_key }}

# The FQDN of a host where the Replication System's Registry service is run. The Czar
# will self-report its connection parameters to the Registry.
registry_host = {{ repl_registry_host }}

# The port number of the Replication System's Registry service.
registry_port = {{ repl_registry_port }}

# The heartbeat interval for self-registering the Czar management services at
# the Replication System's Registry. Note that the value must be strictly
# higher than 0.
registry_heartbeat_ival_sec = 1

# The port number of the Czar control service used by the Replication
# Controller and the Czar monitoring apps. If 0 is set as a value of
# the parameter then the first available port will be assumed. Note that
# the actual (whether explicitly specified or dynamically allocated) port
# number will be reported to the Replication Registry service.
# Note that the value must be strictly higher than 0.
http_port = {{ repl_http_port }}

# The number of the BOOST ASIO threads for serving HTTP requests.
# Note that the value must be strictly higher than 0.
num_http_threads = 2
