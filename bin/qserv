#!/usr/bin/env python3
# This file is part of qserv.
#
# Developed for the LSST Data Management System.
# This product includes software developed by the LSST Project
# (https://www.lsst.org).
# See the COPYRIGHT file at the top-level directory of this distribution
# for details of code ownership.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""This is the command-line `qserv` command. If it's findable on the PATH then
there will be a CLI command called qserv. Use `qserv --help` to for more
information.
"""

import logging
import os
import sys

# Adding the src/admin/python path to sys.path allows options declared in
# src/admin/cli/options.py to be imported and used by the qserv command.
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../../src/admin/python")))

from lsst.qserv.admin.qservCli.qserv_log import log_level_from_args
from lsst.qserv.admin.qservCli.subproc import QservSubprocessError

if __name__ == "__main__":
    success, level_msg = log_level_from_args(sys.argv)
    if success:
        logging.basicConfig(
            level=level_msg,
            format="%(asctime)s %(levelname)-8s %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",
        )
    else:
        print(level_msg)
        sys.exit(1)


def import_and_run():
    # import the qserv CLI function inside a handler for QservSubprocessError
    # because while qserv is being imported CLI objects are being created that
    # run subprocesses in thieir init (e.g. git lookups), and these can cause
    # errors that require exiting
    try:
        from lsst.qserv.admin.qservCli.qserv_cli import qserv

        sys.exit(qserv())
    except QservSubprocessError:
        sys.exit(1)


if __name__ == "__main__":
    import_and_run()
